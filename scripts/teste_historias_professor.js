// Script de Teste para Hist√≥rias do Professor
// Execute este script no console do navegador para testar a funcionalidade

import { 
  getHistoriasProfessor, 
  createHistoriaProfessor, 
  updateHistoriaProfessor, 
  deleteHistoriaProfessor,
  migrarDadosExistentes,
  escolaTemHistoriasProfessor
} from '../src/services/historiaProfessorService.js';

// Fun√ß√£o para testar todas as funcionalidades
async function testarHistoriasProfessor() {
  console.log('üß™ Iniciando testes das Hist√≥rias do Professor...');
  
  const escolaId = 1; // ID de uma escola existente para teste
  
  try {
    // Teste 1: Verificar se a escola tem hist√≥rias
    console.log('\nüìã Teste 1: Verificar se a escola tem hist√≥rias');
    const temHistorias = await escolaTemHistoriasProfessor(escolaId);
    console.log(`Escola ${escolaId} tem hist√≥rias:`, temHistorias);
    
    // Teste 2: Buscar hist√≥rias existentes
    console.log('\nüìã Teste 2: Buscar hist√≥rias existentes');
    const historias = await getHistoriasProfessor(escolaId);
    console.log('Hist√≥rias encontradas:', historias);
    
    // Teste 3: Criar nova hist√≥ria
    console.log('\nüìã Teste 3: Criar nova hist√≥ria');
    const novaHistoria = await createHistoriaProfessor({
      escola_id: escolaId,
      titulo: 'Hist√≥ria de Teste',
      historia: 'Esta √© uma hist√≥ria de teste criada automaticamente.',
      ordem: 1,
      ativo: true
    });
    console.log('Nova hist√≥ria criada:', novaHistoria);
    
    // Teste 4: Atualizar hist√≥ria
    console.log('\nüìã Teste 4: Atualizar hist√≥ria');
    const historiaAtualizada = await updateHistoriaProfessor(novaHistoria.id, {
      titulo: 'Hist√≥ria de Teste Atualizada',
      historia: 'Esta hist√≥ria foi atualizada com sucesso!',
      ordem: 1,
      ativo: true
    });
    console.log('Hist√≥ria atualizada:', historiaAtualizada);
    
    // Teste 5: Verificar hist√≥rias ap√≥s cria√ß√£o
    console.log('\nüìã Teste 5: Verificar hist√≥rias ap√≥s cria√ß√£o');
    const historiasAtualizadas = await getHistoriasProfessor(escolaId);
    console.log('Hist√≥rias ap√≥s cria√ß√£o:', historiasAtualizadas);
    
    // Teste 6: Deletar hist√≥ria de teste
    console.log('\nüìã Teste 6: Deletar hist√≥ria de teste');
    await deleteHistoriaProfessor(novaHistoria.id);
    console.log('Hist√≥ria de teste deletada com sucesso');
    
    // Teste 7: Verificar hist√≥rias ap√≥s dele√ß√£o
    console.log('\nüìã Teste 7: Verificar hist√≥rias ap√≥s dele√ß√£o');
    const historiasFinais = await getHistoriasProfessor(escolaId);
    console.log('Hist√≥rias ap√≥s dele√ß√£o:', historiasFinais);
    
    console.log('\n‚úÖ Todos os testes conclu√≠dos com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  }
}

// Fun√ß√£o para testar migra√ß√£o de dados
async function testarMigracao() {
  console.log('\nüîÑ Testando migra√ß√£o de dados...');
  
  try {
    const resultado = await migrarDadosExistentes();
    console.log('Resultado da migra√ß√£o:', resultado);
  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
  }
}

// Fun√ß√£o para verificar estrutura da tabela
async function verificarEstrutura() {
  console.log('\nüîç Verificando estrutura da tabela...');
  
  try {
    // Teste de conex√£o b√°sica
    const { supabase } = await import('../src/supabaseClient.js');
    
    // Verificar se a tabela existe
    const { data, error } = await supabase
      .from('historias_professor')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erro ao acessar tabela:', error);
      return;
    }
    
    console.log('‚úÖ Tabela historias_professor acess√≠vel');
    console.log('Estrutura da tabela:', data.length > 0 ? Object.keys(data[0]) : 'Tabela vazia');
    
    // Verificar √≠ndices
    const { data: indices, error: indicesError } = await supabase
      .rpc('get_table_indices', { table_name: 'historias_professor' });
    
    if (!indicesError) {
      console.log('√çndices da tabela:', indices);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar estrutura:', error);
  }
}

// Fun√ß√£o para testar bucket de imagens
async function testarBucket() {
  console.log('\nüñºÔ∏è Testando bucket de imagens...');
  
  try {
    const { supabase } = await import('../src/supabaseClient.js');
    
    // Verificar se o bucket existe
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('‚ùå Erro ao listar buckets:', error);
      return;
    }
    
    const bucketExiste = buckets.some(bucket => bucket.name === 'historia-professor-imagens');
    console.log('Bucket historia-professor-imagens existe:', bucketExiste);
    
    if (bucketExiste) {
      // Listar arquivos no bucket
      const { data: arquivos, error: arquivosError } = await supabase.storage
        .from('historia-professor-imagens')
        .list();
      
      if (arquivosError) {
        console.error('‚ùå Erro ao listar arquivos:', arquivosError);
      } else {
        console.log('Arquivos no bucket:', arquivos);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao testar bucket:', error);
  }
}

// Fun√ß√£o principal para executar todos os testes
async function executarTodosOsTestes() {
  console.log('üöÄ Iniciando suite completa de testes...');
  
  await verificarEstrutura();
  await testarBucket();
  await testarHistoriasProfessor();
  await testarMigracao();
  
  console.log('\nüéâ Suite de testes conclu√≠da!');
}

// Exportar fun√ß√µes para uso no console
window.testarHistoriasProfessor = testarHistoriasProfessor;
window.testarMigracao = testarMigracao;
window.verificarEstrutura = verificarEstrutura;
window.testarBucket = testarBucket;
window.executarTodosOsTestes = executarTodosOsTestes;

// Instru√ß√µes de uso
console.log(`
üìñ INSTRU√á√ïES DE USO:

Para executar os testes, use uma das seguintes fun√ß√µes no console:

1. executarTodosOsTestes() - Executa todos os testes
2. verificarEstrutura() - Verifica se a tabela existe e est√° acess√≠vel
3. testarBucket() - Testa se o bucket de imagens existe
4. testarHistoriasProfessor() - Testa as opera√ß√µes CRUD
5. testarMigracao() - Testa a migra√ß√£o de dados existentes

Exemplo:
> executarTodosOsTestes()
`);

// Executar verifica√ß√£o b√°sica automaticamente
verificarEstrutura(); 