{"version":3,"file":"static/js/969.0fc17a86.chunk.js","mappings":"4OASA,MAwfA,EAxf0BA,IAAoC,IAAnC,SAAEC,EAAQ,QAAEC,EAAO,OAAEC,GAAQH,EACtD,MAAOI,EAAgBC,IAAqBC,EAAAA,EAAAA,WAAQC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACjDN,GAAQ,IACXO,SAAUP,EAASQ,YAAcR,EAASQ,YAAYC,MAAM,KAAK,GAAK,GACtEC,UAAWV,EAASQ,YAAcR,EAASQ,YAAYC,MAAM,KAAK,GAAK,OAElEE,EAAcC,IAAmBP,EAAAA,EAAAA,WAAS,IAC1CQ,EAAkBC,IAAuBT,EAAAA,EAAAA,WAAS,IAClDU,EAAQC,IAAaX,EAAAA,EAAAA,UAAS,CAAC,IAC/BY,EAAUC,IAAeb,EAAAA,EAAAA,WAAS,IAClCc,EAAYC,IAAiBf,EAAAA,EAAAA,UAAS,CAC3CgB,eAAgB,GAChBC,UAAW,GACXC,iBAAiB,EACjBC,YAAa,MAGRC,EAAYC,IAAiBrB,EAAAA,EAAAA,UAAS,CAC3CsB,aAAa,EACbC,UAAW,KACXC,WAAW,EACXC,gBAAgB,KAIOC,EAAAA,EAAAA,QAAO,OACTA,EAAAA,EAAAA,QAAO,KACPA,EAAAA,EAAAA,QAAO,MAG9BC,EAAAA,WAAgB,KACd,GAAIhC,EAASiC,QAAS,CACpB,MAAMC,EAAiBlC,EAASiC,QAAQxB,MAAM,KAAK0B,QAAOC,GAAOA,IACjEhB,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPf,UAAWY,KAEf,IACC,CAAClC,EAASiC,UAGb,MAyIMK,EAAoBC,UACxB,MAAMC,EAAQC,MAAMC,KAAKC,EAAMC,OAAOJ,OACtC,GAAqB,IAAjBA,EAAMK,OAAc,OAExB,MAAMC,EAAaN,EAAML,QAAOY,IAC9B,MAAMC,EAAc,CAAC,aAAc,YAAa,aAAaC,SAASF,EAAKG,MACrEC,EAAcJ,EAAKK,MAAQ,QACjC,OAAOJ,GAAeG,KAGpBL,EAAWD,SAAWL,EAAMK,QAC9BzB,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPb,YAAa,8EAIjBJ,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPhB,eAAgB,IAAIgB,EAAKhB,kBAAmByB,OAG9CA,EAAWO,SAAQN,IACjB,MAAMO,EAAS,IAAIC,WACnBD,EAAOE,UAAY,KACjBpC,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPf,UAAW,IAAIe,EAAKf,UAAWgC,EAAOG,aAG1CH,EAAOI,cAAcX,OAInBY,EAAqBpB,UACzB,GAAyC,IAArCpB,EAAWE,eAAewB,OAAc,OAE5CzB,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU+B,GAAI,IAAEd,iBAAiB,EAAMC,YAAa,OACtE,MAAMoC,EAAe,GAErB,IACE,IAAK,MAAMb,KAAQ5B,EAAWE,eAAgB,CAC5C,MAAMwC,EAAUd,EAAKe,KAAKrD,MAAM,KAAKsD,MAC/BC,EAAQ,GAAAC,OAAMC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAAE,KAAAJ,OAAIJ,GACzDS,EAAQ,aAAAL,OAAgBD,IAEtBO,MAAO/C,SAAsBgD,EAAAA,EAASC,QAC3C/B,KAAK,SACLgC,OAAOJ,EAAUvB,GAEpB,GAAIvB,EAAa,MAAMA,EAEvB,MAAQmD,MAAM,UAAEC,IAAgBJ,EAAAA,EAASC,QACtC/B,KAAK,SACLmC,aAAaP,GAEhBV,EAAakB,KAAKF,EACpB,CAGA,MACMG,EAAU,IADK5E,EAAe8B,QAAU9B,EAAe8B,QAAQxB,MAAM,KAAK0B,QAAOC,GAAOA,IAAO,MAChEwB,GAErCxD,GAAkBiC,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjB+B,GAAI,IACPJ,QAAS8C,EAAQC,KAAK,SAGxB5D,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPhB,eAAgB,GAChBC,UAAWyD,KAEf,CAAE,MAAOR,GACPU,QAAQV,MAAM,kBAAmBA,GACjCnD,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPb,YAAa,wDAEjB,CAAC,QACCJ,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU+B,GAAI,IAAEd,iBAAiB,KACrD,GAeF,OACE2D,EAAAA,EAAAA,KAAA,OACEC,UAAU,gGACVC,MAAO,CACLC,OAAQ,qBACRC,UAAW,qBACXC,QAAS,OACTC,cAAe,UACfC,UAEFP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBM,UACrCC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,MAAKM,SAAA,EAClBC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,yCAAwCM,SAAA,EACrDP,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sCAAqCM,SAAC,kBACpDP,EAAAA,EAAAA,KAAA,UACES,QAAS1F,EACTkF,UAAU,4CACV,aAAW,gBAAeM,SAC3B,eAIHC,EAAAA,EAAAA,MAAA,QAAMP,UAAU,YAAYS,SA3JdC,IAEpB,GADAA,EAAEC,iBAViBC,MACnB,MAAMC,EAAY,CAAC,EAKnB,OAJK7F,EAAe8F,SAAQD,EAAUC,OAAS,kCAC1C9F,EAAeI,UAAaJ,EAAeO,YAAWsF,EAAUxF,YAAc,0CAC9EL,EAAe+F,sBAAqBF,EAAUE,oBAAsB,kDACzElF,EAAUgF,GAC+B,IAAlCG,OAAOC,KAAKJ,GAAWnD,QAK1BkD,GAAgB,CAElB,MAAMM,GAAa/F,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACdH,GAAc,IACjB8B,QAAS9B,EAAe8B,QACpB9B,EAAe8B,QACZxB,MAAM,KACN6F,KAAIlE,GAAOA,EAAImE,SACfpE,QAAOC,IACN,IAEE,OADA,IAAIoE,IAAIpE,IACD,CACT,CAAE,MAAAqE,GACA,OAAO,CACT,KAEDzB,KAAK,KACR,KAEN9E,EAAOmG,GACPvF,GAAoB,GACpB4F,YAAW,KACT5F,GAAoB,KACnB,IACL,GAiIyD2E,SAAA,EACjDP,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CACTC,MAAM,YACNC,GAAG,SACH3D,KAAK,OACL4D,MAAO3G,EAAe8F,QAAU,GAChCc,SAAWlB,GACTzF,GAAmBiC,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClB+B,GAAI,IACP4D,OAAQJ,EAAEjD,OAAOkE,UAGrBE,YAAY,8BACZzC,MAAOxD,EAAOkF,UAEhBP,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,SAAOP,UAAU,kCAAiCM,SAAA,CAAC,qBAChCP,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcM,SAAC,UAElDC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,WAAWC,MAAO,CAAE6B,OAAQ,UAAWxB,SAAA,EACpDC,EAAAA,EAAAA,MAAA,UACExC,KAAK,SACLyC,QAASA,IAAM/E,GAAiBD,GAChCwE,UAAU,sGAAqGM,SAAA,EAE/GP,EAAAA,EAAAA,KAAA,QAAAO,SACGtF,EAAe+G,MAAQ,kCAE1BhC,EAAAA,EAAAA,KAAA,OACEC,UAAU,wBACVgC,KAAK,OACLC,OAAO,eACPC,QAAQ,YAAW5B,UAEnBP,EAAAA,EAAAA,KAAA,QACEoC,cAAc,QACdC,eAAe,QACfC,YAAa,EACbC,EAAE,wBAIP9G,IACCuE,EAAAA,EAAAA,KAAA,OACEC,UAAU,oDACVC,MAAO,CACLsC,IAAK,OACLC,KAAM,EACNV,OAAQ,SACR3B,UAAW,QACXsC,UAAW,QACXnC,SAEDoC,EAAAA,EAAOvB,KAAI,CAACwB,EAAOC,KAClBrC,EAAAA,EAAAA,MAAA,UAEExC,KAAK,SACLyC,QAASA,KAAMqC,OAvLXd,EAuL4BY,EAAMhB,MAtL1D1G,GAAmBiC,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClB+B,GAAI,IACP6E,KAAMA,WAERtG,GAAgB,GALQsG,OAwLJ/B,UAAS,2DAAAlB,OAA6D6D,EAAMG,IAAG,kBAAiBxC,SAAA,CAE/FqC,EAAMI,MAAMC,WAAW,SACtBjD,EAAAA,EAAAA,KAAA,OACEkD,IAAKN,EAAMI,MACXG,IAAKP,EAAMlB,MACXzB,UAAU,kBAGZD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,OAAMM,SAAEqC,EAAMI,SAEhChD,EAAAA,EAAAA,KAAA,QAAAO,SAAOqC,EAAMlB,UAdRmB,cAqBjB7C,EAAAA,EAAAA,KAACoD,EAAAA,EAAU,CACTC,YAAapI,EACbqI,eAAgBpI,EAChBmE,MAAOxD,EAAOP,YACd8B,kBAAmBA,EACnBqB,mBAAoBA,EACpB8E,kBA/RclG,UACxB,GAAKd,EAAWG,UAAhB,CAEAF,GAAcW,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU+B,GAAI,IAAEP,gBAAgB,MAClDV,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU+B,GAAI,IAAEb,YAAa,OAE/C,IACE,MAAMwC,EAAQ,SAAAC,OAAYC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAAE,QAC3DC,EAAQ,UAAAL,OAAaD,IAEnBO,MAAO/C,SAAsBgD,EAAAA,EAASC,QAC3C/B,KAAK,SACLgC,OAAOJ,EAAU7C,EAAWG,WAE/B,GAAIJ,EAAa,MAAMA,EAEvB,MAAQmD,MAAM,UAAEC,IAAgBJ,EAAAA,EAASC,QACtC/B,KAAK,SACLmC,aAAaP,GAEhBlE,GAAkBiC,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjB+B,GAAI,IACPqG,MAAO9D,MAGTlD,GAAcW,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPT,UAAW,KACXC,WAAW,EACXC,gBAAgB,KAEpB,CAAE,MAAOyC,GACPU,QAAQV,MAAM,8BAA4BA,GAC1CnD,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPb,YAAa,yDAEfE,GAAcW,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU+B,GAAI,IAAEP,gBAAgB,KACpD,CArCiC,GA+RvBX,WAAYA,EACZM,WAAYA,EACZL,cAAeA,EACfM,cAAeA,KAEjBwD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWM,UACxBP,EAAAA,EAAAA,KAACyD,EAAAA,EAAc,CACb7B,MAAO3G,EAAe+F,oBACtBa,SAAWD,GAAU1G,GAAkBiC,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU+B,GAAI,IAAE6D,oBAAqBY,MAChFvC,MAAOxD,EAAOmF,yBAGlBhB,EAAAA,EAAAA,KAACyB,EAAAA,EAAU,CACTC,MAAM,QACNC,GAAG,QACH3D,KAAK,MACL4D,MAAO3G,EAAeyI,OAAS,GAC/B7B,SAAWlB,GAAMzF,GAAkBiC,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAS+B,GAAI,IAAEuG,MAAO/C,EAAEjD,OAAOkE,UACtEE,YAAY,oCAIdtB,EAAAA,EAAAA,MAAA,OAAKP,UAAU,YAAWM,SAAA,EACxBP,EAAAA,EAAAA,KAAA,SAAOC,UAAU,kCAAiCM,SAAC,aAGnDC,EAAAA,EAAAA,MAAA,OAAKP,UAAU,YAAWM,SAAA,CAEvBtE,EAAWG,UAAUuB,OAAS,IAC7BqC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wCAAuCM,SACnDtE,EAAWG,UAAUgF,KAAI,CAAClE,EAAKyG,KAC9BnD,EAAAA,EAAAA,MAAA,OAAiBP,UAAU,iBAAgBM,SAAA,EACzCP,EAAAA,EAAAA,KAAA,OACEkD,IAAKhG,EACLiG,IAAG,UAAApE,OAAY4E,EAAQ,GACvB1D,UAAU,yCAEZD,EAAAA,EAAAA,KAAA,UACEhC,KAAK,SACLyC,QAASA,IA5JZkD,KACnB,MAAMC,EAAe3H,EAAWG,UAAUa,QAAO,CAAC4G,EAAGC,IAAMA,IAAMH,IACjEzH,GAAciB,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACb+B,GAAI,IACPf,UAAWwH,MAEb1I,GAAkBiC,IAAI/B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjB+B,GAAI,IACPJ,QAAS6G,EAAa9D,KAAK,UAoJQiE,CAAYJ,GAC3B1D,UAAU,qHAAoHM,UAE9HP,EAAAA,EAAAA,KAACgE,EAAAA,EAAC,CAAC/D,UAAU,gBAXP0D,QAmBhBnD,EAAAA,EAAAA,MAAA,OAAKP,UAAU,0BAAyBM,SAAA,EACtCC,EAAAA,EAAAA,MAAA,SAAOP,UAAU,yHAAwHM,SAAA,EACvIP,EAAAA,EAAAA,KAACiE,EAAAA,EAAM,CAAChE,UAAU,aAClBD,EAAAA,EAAAA,KAAA,QAAAO,SAAM,uBACNP,EAAAA,EAAAA,KAAA,SACEhC,KAAK,OACLkG,OAAO,UACPC,UAAQ,EACRlE,UAAU,SACV4B,SAAUzE,OAGbnB,EAAWE,eAAewB,OAAS,IAClCqC,EAAAA,EAAAA,KAAA,UACEhC,KAAK,SACLyC,QAAShC,EACT2F,SAAUnI,EAAWI,gBACrB4D,UAAU,0GAAyGM,SAElHtE,EAAWI,gBAAkB,cAAgB,sBAInDJ,EAAWK,cACV0D,EAAAA,EAAAA,KAAA,KAAGC,UAAU,uBAAsBM,SAAEtE,EAAWK,qBAKtDkE,EAAAA,EAAAA,MAAA,OAAKP,UAAU,8BAA6BM,SAAA,EAC1CP,EAAAA,EAAAA,KAAA,UACEhC,KAAK,SACLyC,QAAS1F,EACTkF,UAAU,gEACVmE,SAAUrI,EAASwE,SACpB,cAGDP,EAAAA,EAAAA,KAAA,UACEhC,KAAK,SACLiC,UAAU,qFACVmE,SAAUrI,EAASwE,SAElBxE,EAAW,cAAgB,cAI/BF,EAAOwI,SACNrE,EAAAA,EAAAA,KAAA,KAAGC,UAAU,4BAA2BM,SAAE1E,EAAOwI,SAGlD1I,IACCqE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,8CAA6CM,SAAC,mD","sources":["components/EditLocationPanel/index.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { supabase } from '../../supabaseClient';\nimport MapSection from \"../AddLocationPanel/components/MapSection\";\nimport InputField from \"../AddLocationPanel/components/InputField\";\nimport RichTextEditor from \"../AddLocationPanel/components/RichTextEditor\";\nimport { opcoes } from \"../AddLocationPanel/constants\";\nimport { Upload, X } from 'lucide-react';\n\nconst EditLocationPanel = ({ location, onClose, onSave }) => {\n  const [editedLocation, setEditedLocation] = useState({\n    ...location,\n    latitude: location.localizacao ? location.localizacao.split(',')[0] : '',\n    longitude: location.localizacao ? location.localizacao.split(',')[1] : '',\n  });\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [isSaving, setIsSaving] = useState(false);\n  const [mediaState, setMediaState] = useState({\n    selectedImages: [],\n    imageUrls: [],\n    uploadingImages: false,\n    uploadError: \"\",\n  });\n\n  const [audioState, setAudioState] = useState({\n    isRecording: false,\n    audioBlob: null,\n    isPlaying: false,\n    uploadingAudio: false\n  });\n\n  // Refs para áudio\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const audioPlayerRef = useRef(null);\n\n  // Inicializa as imagens existentes\n  React.useEffect(() => {\n    if (location.imagens) {\n      const existingImages = location.imagens.split(',').filter(url => url);\n      setMediaState(prev => ({\n        ...prev,\n        imageUrls: existingImages\n      }));\n    }\n  }, [location.imagens]);\n\n  // Funções de áudio\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      audioChunksRef.current = [];\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorderRef.current.onstop = () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n        setAudioState(prev => ({ ...prev, audioBlob }));\n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorderRef.current.start();\n      setAudioState(prev => ({ ...prev, isRecording: true }));\n    } catch (error) {\n      console.error('Erro ao iniciar gravação:', error);\n      setMediaState(prev => ({\n        ...prev,\n        uploadError: \"Erro ao acessar o microfone. Verifique as permissões.\"\n      }));\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && audioState.isRecording) {\n      mediaRecorderRef.current.stop();\n      setAudioState(prev => ({ ...prev, isRecording: false }));\n    }\n  };\n\n  const handleAudioPlayback = () => {\n    if (!audioState.audioBlob) return;\n\n    if (audioState.isPlaying) {\n      audioPlayerRef.current?.pause();\n      setAudioState(prev => ({ ...prev, isPlaying: false }));\n    } else {\n      const audioUrl = URL.createObjectURL(audioState.audioBlob);\n      audioPlayerRef.current.src = audioUrl;\n      audioPlayerRef.current.play();\n      setAudioState(prev => ({ ...prev, isPlaying: true }));\n    }\n  };\n\n  const handleUploadAudio = async () => {\n    if (!audioState.audioBlob) return;\n\n    setAudioState(prev => ({ ...prev, uploadingAudio: true }));\n    setMediaState(prev => ({ ...prev, uploadError: \"\" }));\n\n    try {\n      const fileName = `audio_${Math.random().toString(36).substring(2)}.wav`;\n      const filePath = `audios/${fileName}`;\n\n      const { error: uploadError } = await supabase.storage\n        .from('media')\n        .upload(filePath, audioState.audioBlob);\n\n      if (uploadError) throw uploadError;\n\n      const { data: { publicUrl } } = supabase.storage\n        .from('media')\n        .getPublicUrl(filePath);\n\n      setEditedLocation(prev => ({\n        ...prev,\n        audio: publicUrl\n      }));\n\n      setAudioState(prev => ({\n        ...prev,\n        audioBlob: null,\n        isPlaying: false,\n        uploadingAudio: false\n      }));\n    } catch (error) {\n      console.error('Erro no upload do áudio:', error);\n      setMediaState(prev => ({\n        ...prev,\n        uploadError: \"Erro ao fazer upload do áudio. Tente novamente.\"\n      }));\n      setAudioState(prev => ({ ...prev, uploadingAudio: false }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    if (!editedLocation.titulo) newErrors.titulo = \"Título é obrigatório.\";\n    if (!editedLocation.latitude || !editedLocation.longitude) newErrors.localizacao = \"Localização é obrigatória.\";\n    if (!editedLocation.descricao_detalhada) newErrors.descricao_detalhada = \"Descrição detalhada é obrigatória.\";\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validateForm()) {\n      // Limpa e valida as URLs das imagens\n      const cleanLocation = {\n        ...editedLocation,\n        imagens: editedLocation.imagens\n          ? editedLocation.imagens\n              .split(',')\n              .map(url => url.trim())\n              .filter(url => {\n                try {\n                  new URL(url);\n                  return true;\n                } catch {\n                  return false;\n                }\n              })\n              .join(',')\n          : ''\n      };\n      onSave(cleanLocation);\n      setShowConfirmation(true);\n      setTimeout(() => {\n        setShowConfirmation(false);\n      }, 3000);\n    }\n  };\n\n  const handleTipoChange = (tipo) => {\n    setEditedLocation((prev) => ({\n      ...prev,\n      tipo: tipo,\n    }));\n    setDropdownOpen(false);\n  };\n\n  const handleImageSelect = async (event) => {\n    const files = Array.from(event.target.files);\n    if (files.length === 0) return;\n\n    const validFiles = files.filter(file => {\n      const isValidType = ['image/jpeg', 'image/png', 'image/jpg'].includes(file.type);\n      const isValidSize = file.size <= 5 * 1024 * 1024; // 5MB\n      return isValidType && isValidSize;\n    });\n\n    if (validFiles.length !== files.length) {\n      setMediaState(prev => ({\n        ...prev,\n        uploadError: \"Alguns arquivos foram ignorados. Use apenas imagens JPG/PNG até 5MB.\"\n      }));\n    }\n\n    setMediaState(prev => ({\n      ...prev,\n      selectedImages: [...prev.selectedImages, ...validFiles]\n    }));\n\n    validFiles.forEach(file => {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setMediaState(prev => ({\n          ...prev,\n          imageUrls: [...prev.imageUrls, reader.result]\n        }));\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const handleUploadImages = async () => {\n    if (mediaState.selectedImages.length === 0) return;\n\n    setMediaState(prev => ({ ...prev, uploadingImages: true, uploadError: \"\" }));\n    const uploadedUrls = [];\n\n    try {\n      for (const file of mediaState.selectedImages) {\n        const fileExt = file.name.split('.').pop();\n        const fileName = `${Math.random().toString(36).substring(2)}.${fileExt}`;\n        const filePath = `locations/${fileName}`;\n\n        const { error: uploadError } = await supabase.storage\n          .from('media')\n          .upload(filePath, file);\n\n        if (uploadError) throw uploadError;\n\n        const { data: { publicUrl } } = supabase.storage\n          .from('media')\n          .getPublicUrl(filePath);\n\n        uploadedUrls.push(publicUrl);\n      }\n\n      // Combina as URLs existentes com as novas\n      const existingUrls = editedLocation.imagens ? editedLocation.imagens.split(',').filter(url => url) : [];\n      const allUrls = [...existingUrls, ...uploadedUrls];\n\n      setEditedLocation(prev => ({\n        ...prev,\n        imagens: allUrls.join(',')\n      }));\n\n      setMediaState(prev => ({\n        ...prev,\n        selectedImages: [],\n        imageUrls: allUrls\n      }));\n    } catch (error) {\n      console.error('Erro no upload:', error);\n      setMediaState(prev => ({\n        ...prev,\n        uploadError: \"Erro ao fazer upload das imagens. Tente novamente.\"\n      }));\n    } finally {\n      setMediaState(prev => ({ ...prev, uploadingImages: false }));\n    }\n  };\n\n  const removeImage = (index) => {\n    const newImageUrls = mediaState.imageUrls.filter((_, i) => i !== index);\n    setMediaState(prev => ({\n      ...prev,\n      imageUrls: newImageUrls\n    }));\n    setEditedLocation(prev => ({\n      ...prev,\n      imagens: newImageUrls.join(',')\n    }));\n  };\n\n  return (\n    <div\n      className=\"fixed top-16 right-0 sm:w-3/4 lg:w-[49%] bg-white rounded-xl shadow-lg z-[9999] text-gray-800\"\n      style={{\n        height: 'calc(100vh - 4rem)',\n        maxHeight: 'calc(100vh - 4rem)',\n        display: \"flex\",\n        flexDirection: \"column\"\n      }}\n    >\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Editar Local</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-600 hover:text-gray-900 text-lg\"\n              aria-label=\"Fechar painel\"\n            >\n              ✖\n            </button>\n          </div>\n          <form className=\"space-y-4\" onSubmit={handleSubmit}>\n            <InputField\n              label=\"Título\"\n              id=\"titulo\"\n              type=\"text\"\n              value={editedLocation.titulo || \"\"}\n              onChange={(e) =>\n                setEditedLocation((prev) => ({\n                  ...prev,\n                  titulo: e.target.value,\n                }))\n              }\n              placeholder=\"Digite o título do local\"\n              error={errors.titulo}\n            />\n            <div>\n              <label className=\"block font-medium text-gray-800\">\n                Tipo de Marcador <span className=\"text-red-500\">*</span>\n              </label>\n              <div className=\"relative\" style={{ zIndex: 99999999 }}>\n                <button\n                  type=\"button\"\n                  onClick={() => setDropdownOpen(!dropdownOpen)}\n                  className=\"w-full border rounded p-2 flex items-center justify-between text-gray-800 bg-white hover:bg-gray-50\"\n                >\n                  <span>\n                    {editedLocation.tipo || \"Selecione o tipo de marcador\"}\n                  </span>\n                  <svg\n                    className=\"w-4 h-4 text-gray-600\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M19 9l-7 7-7-7\"\n                    />\n                  </svg>\n                </button>\n                {dropdownOpen && (\n                  <div\n                    className=\"absolute w-full bg-white border rounded shadow-lg\"\n                    style={{\n                      top: '100%',\n                      left: 0,\n                      zIndex: 99999999,\n                      maxHeight: '300px',\n                      overflowY: 'auto'\n                    }}\n                  >\n                    {opcoes.map((opcao, idx) => (\n                      <button\n                        key={idx}\n                        type=\"button\"\n                        onClick={() => handleTipoChange(opcao.value)}\n                        className={`w-full text-left p-2 hover:bg-gray-50 flex items-center ${opcao.cor} text-gray-800`}\n                      >\n                        {opcao.icone.startsWith(\"http\") ? (\n                          <img\n                            src={opcao.icone}\n                            alt={opcao.label}\n                            className=\"w-6 h-6 mr-2\"\n                          />\n                        ) : (\n                          <span className=\"mr-2\">{opcao.icone}</span>\n                        )}\n                        <span>{opcao.label}</span>\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n            <MapSection\n              newLocation={editedLocation}\n              setNewLocation={setEditedLocation}\n              error={errors.localizacao}\n              handleImageSelect={handleImageSelect}\n              handleUploadImages={handleUploadImages}\n              handleUploadAudio={handleUploadAudio}\n              mediaState={mediaState}\n              audioState={audioState}\n              setMediaState={setMediaState}\n              setAudioState={setAudioState}\n            />\n            <div className=\"space-y-2\">\n              <RichTextEditor\n                value={editedLocation.descricao_detalhada}\n                onChange={(value) => setEditedLocation(prev => ({ ...prev, descricao_detalhada: value }))}\n                error={errors.descricao_detalhada}\n              />\n            </div>\n            <InputField\n              label=\"Links\"\n              id=\"links\"\n              type=\"url\"\n              value={editedLocation.links || \"\"}\n              onChange={(e) => setEditedLocation(prev => ({...prev, links: e.target.value}))}\n              placeholder=\"Cole um link aqui (http://...)\"\n            />\n\n            {/* Seção de Upload de Imagens */}\n            <div className=\"space-y-4\">\n              <label className=\"block font-medium text-gray-800\">\n                Imagens\n              </label>\n              <div className=\"space-y-4\">\n                {/* Grid de imagens existentes */}\n                {mediaState.imageUrls.length > 0 && (\n                  <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4\">\n                    {mediaState.imageUrls.map((url, index) => (\n                      <div key={index} className=\"relative group\">\n                        <img\n                          src={url}\n                          alt={`Imagem ${index + 1}`}\n                          className=\"w-full h-32 object-cover rounded-lg\"\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => removeImage(index)}\n                          className=\"absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Upload de novas imagens */}\n                <div className=\"flex items-center gap-4\">\n                  <label className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 text-white rounded-lg cursor-pointer hover:bg-blue-600 transition-colors\">\n                    <Upload className=\"w-4 h-4\" />\n                    <span>Adicionar Imagens</span>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      multiple\n                      className=\"hidden\"\n                      onChange={handleImageSelect}\n                    />\n                  </label>\n                  {mediaState.selectedImages.length > 0 && (\n                    <button\n                      type=\"button\"\n                      onClick={handleUploadImages}\n                      disabled={mediaState.uploadingImages}\n                      className=\"px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors disabled:bg-green-300\"\n                    >\n                      {mediaState.uploadingImages ? \"Enviando...\" : \"Enviar Imagens\"}\n                    </button>\n                  )}\n                </div>\n                {mediaState.uploadError && (\n                  <p className=\"text-red-500 text-sm\">{mediaState.uploadError}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"mt-4 flex justify-end gap-2\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 text-gray-800\"\n                disabled={isSaving}\n              >\n                Cancelar\n              </button>\n              <button\n                type=\"submit\"\n                className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:bg-green-300\"\n                disabled={isSaving}\n              >\n                {isSaving ? \"Salvando...\" : \"Salvar\"}\n              </button>\n            </div>\n            {/* Mensagem de erro geral */}\n            {errors.submit && (\n              <p className=\"text-red-500 text-sm mt-2\">{errors.submit}</p>\n            )}\n            {/* Mensagem de confirmação */}\n            {showConfirmation && (\n              <div className=\"text-green-600 text-sm mt-2 animate-fade-in\">✔ Local atualizado com sucesso!</div>\n            )}\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nEditLocationPanel.propTypes = {\n  location: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    titulo: PropTypes.string,\n    tipo: PropTypes.string,\n    descricao_detalhada: PropTypes.string,\n    localizacao: PropTypes.string,\n    links: PropTypes.string,\n    imagens: PropTypes.string,\n  }).isRequired,\n  onClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n};\n\nexport default EditLocationPanel;"],"names":["_ref","location","onClose","onSave","editedLocation","setEditedLocation","useState","_objectSpread","latitude","localizacao","split","longitude","dropdownOpen","setDropdownOpen","showConfirmation","setShowConfirmation","errors","setErrors","isSaving","setIsSaving","mediaState","setMediaState","selectedImages","imageUrls","uploadingImages","uploadError","audioState","setAudioState","isRecording","audioBlob","isPlaying","uploadingAudio","useRef","React","imagens","existingImages","filter","url","prev","handleImageSelect","async","files","Array","from","event","target","length","validFiles","file","isValidType","includes","type","isValidSize","size","forEach","reader","FileReader","onloadend","result","readAsDataURL","handleUploadImages","uploadedUrls","fileExt","name","pop","fileName","concat","Math","random","toString","substring","filePath","error","supabase","storage","upload","data","publicUrl","getPublicUrl","push","allUrls","join","console","_jsx","className","style","height","maxHeight","display","flexDirection","children","_jsxs","onClick","onSubmit","e","preventDefault","validateForm","newErrors","titulo","descricao_detalhada","Object","keys","cleanLocation","map","trim","URL","_unused","setTimeout","InputField","label","id","value","onChange","placeholder","zIndex","tipo","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","top","left","overflowY","opcoes","opcao","idx","handleTipoChange","cor","icone","startsWith","src","alt","MapSection","newLocation","setNewLocation","handleUploadAudio","audio","RichTextEditor","links","index","newImageUrls","_","i","removeImage","X","Upload","accept","multiple","disabled","submit"],"sourceRoot":""}