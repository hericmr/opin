{"version":3,"file":"static/js/16.267de1db.chunk.js","mappings":"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","sources":["components/TestLegendas.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { addLegendaFoto, updateLegendaFoto, getLegendaByImageUrl, testLegendasTable } from '../services/legendasService';\n\nconst TestLegendas = () => {\n  const [testResults, setTestResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const addLog = (message, type = 'info') => {\n    const timestamp = new Date().toLocaleTimeString();\n    setTestResults(prev => [...prev, { timestamp, message, type }]);\n  };\n\n  const runTests = async () => {\n    setLoading(true);\n    setTestResults([]);\n    \n    try {\n      addLog('=== INICIANDO TESTES DE LEGENDAS ===', 'header');\n      \n      // Teste 1: Verificar estrutura da tabela\n      addLog('Teste 1: Verificando estrutura da tabela...');\n      await testLegendasTable();\n      addLog('✅ Teste da estrutura da tabela concluído');\n      \n      // Teste 2: Tentar criar uma legenda de teste\n      addLog('Teste 2: Criando legenda de teste...');\n      const testLegenda = {\n        escola_id: 1,\n        imagem_url: 'test/test-image.jpg',\n        legenda: 'Legenda de teste',\n        descricao_detalhada: 'Descrição detalhada de teste',\n        autor_foto: 'Teste Autor',\n        data_foto: '2024-01-01',\n        categoria: 'teste',\n        ativo: true,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      \n      const novaLegenda = await addLegendaFoto(testLegenda);\n      addLog(`✅ Legenda criada com ID: ${novaLegenda.id}`);\n      \n      // Teste 3: Buscar a legenda criada\n      addLog('Teste 3: Buscando legenda criada...');\n      const legendaEncontrada = await getLegendaByImageUrl('test/test-image.jpg', 1);\n      if (legendaEncontrada) {\n        addLog(`✅ Legenda encontrada: ${legendaEncontrada.legenda}`);\n      } else {\n        addLog('❌ Legenda não encontrada', 'error');\n      }\n      \n      // Teste 4: Atualizar a legenda\n      addLog('Teste 4: Atualizando legenda...');\n      const updateData = {\n        legenda: 'Legenda atualizada',\n        updated_at: new Date().toISOString()\n      };\n      \n      const legendaAtualizada = await updateLegendaFoto(novaLegenda.id, updateData);\n      addLog(`✅ Legenda atualizada: ${legendaAtualizada.legenda}`);\n      \n      // Teste 5: Verificar se a atualização foi salva\n      addLog('Teste 5: Verificando se a atualização foi salva...');\n      const legendaVerificada = await getLegendaByImageUrl('test/test-image.jpg', 1);\n      if (legendaVerificada && legendaVerificada.legenda === 'Legenda atualizada') {\n        addLog('✅ Atualização salva corretamente');\n      } else {\n        addLog('❌ Atualização não foi salva corretamente', 'error');\n      }\n      \n      addLog('=== TESTES CONCLUÍDOS COM SUCESSO ===', 'success');\n      \n    } catch (error) {\n      addLog(`❌ ERRO NOS TESTES: ${error.message}`, 'error');\n      console.error('Erro nos testes:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const clearLogs = () => {\n    setTestResults([]);\n  };\n\n  return (\n    <div className=\"p-6 bg-white rounded-lg shadow-lg max-w-4xl mx-auto\">\n      <h2 className=\"text-2xl font-bold mb-4\">Teste de Funcionalidade de Legendas</h2>\n      \n      <div className=\"mb-6\">\n        <button\n          onClick={runTests}\n          disabled={loading}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 mr-4\"\n        >\n          {loading ? 'Executando Testes...' : 'Executar Testes'}\n        </button>\n        \n        <button\n          onClick={clearLogs}\n          className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700\"\n        >\n          Limpar Logs\n        </button>\n      </div>\n      \n      <div className=\"bg-gray-100 rounded-lg p-4 max-h-96 overflow-y-auto\">\n        <h3 className=\"font-semibold mb-2\">Logs dos Testes:</h3>\n        {testResults.length === 0 ? (\n          <p className=\"text-gray-500\">Nenhum teste executado ainda.</p>\n        ) : (\n          <div className=\"space-y-1\">\n            {testResults.map((result, index) => (\n              <div key={index} className={`text-sm font-mono ${\n                result.type === 'error' ? 'text-red-600' :\n                result.type === 'success' ? 'text-green-600' :\n                result.type === 'header' ? 'text-blue-600 font-bold' :\n                'text-gray-800'\n              }`}>\n                [{result.timestamp}] {result.message}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      \n      <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n        <h4 className=\"font-semibold text-yellow-800 mb-2\">Instruções:</h4>\n        <ol className=\"text-sm text-yellow-700 space-y-1 list-decimal list-inside\">\n          <li>Clique em \"Executar Testes\" para verificar se a funcionalidade de legendas está funcionando</li>\n          <li>Verifique os logs para identificar possíveis problemas</li>\n          <li>Se houver erros, execute o script SQL no Supabase para corrigir a estrutura da tabela</li>\n          <li>Teste novamente após corrigir problemas no banco de dados</li>\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nexport default TestLegendas; "],"names":["TestLegendas","testResults","setTestResults","useState","loading","setLoading","addLog","message","type","arguments","length","undefined","timestamp","Date","toLocaleTimeString","prev","_jsxs","className","children","_jsx","onClick","async","testLegendasTable","testLegenda","escola_id","imagem_url","legenda","descricao_detalhada","autor_foto","data_foto","categoria","ativo","created_at","toISOString","updated_at","novaLegenda","addLegendaFoto","concat","id","legendaEncontrada","getLegendaByImageUrl","updateData","legendaAtualizada","updateLegendaFoto","legendaVerificada","error","console","disabled","clearLogs","map","result","index"],"sourceRoot":""}